{"version":3,"sources":["app-context.js","App.js","serviceWorker.js","index.js"],"names":["AppStateContext","React","createContext","state","AppDispatchContext","appReducer","action","type","data","Error","AppProvider","children","useReducer","dispatch","Provider","value","App","useState","setData","useEffect","wretch","get","json","parsedData","map","item","title","console","log","localStorage","setItem","JSON","stringify","catch","error","parse","getItem","className","post","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kOACMA,EAAkBC,IAAMC,cAAc,CAAEC,MAAO,YAC/CC,EAAqBH,IAAMC,gBAEjC,SAASG,EAAWF,EAAOG,GACzB,OAAQA,EAAOC,MACb,IAAK,cACH,MAAO,CAAEJ,MAAOG,EAAOE,MAEzB,QACE,MAAM,IAAIC,MAAJ,iCAAoCH,EAAOC,QAKvD,SAASG,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SAAY,EACPV,IAAMW,WAAWP,EAAY,CAAEF,MAAO,YAD/B,mBAC1BA,EAD0B,KACnBU,EADmB,KAEjC,OACE,kBAACb,EAAgBc,SAAjB,CAA0BC,MAAOZ,GAC/B,kBAACC,EAAmBU,SAApB,CAA6BC,MAAOF,GACjCF,I,MCkBMK,MAjCf,WAAe,MAGWf,IAAMgB,SAAS,IAH1B,mBAGNT,EAHM,KAGAU,EAHA,KAqBb,OAhBAjB,IAAMkB,WAAU,WACdC,YAAO,mCACJC,MACAC,MAAK,SAACA,GACL,IAAMC,EAAaD,EAAKd,KAAKG,SAASa,KAAI,SAACC,GAAD,OAAUA,EAAKjB,KAAKkB,SAC9DC,QAAQC,IAAI,iDACZC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUT,IAC5CL,EAAQK,MAETU,OAAM,SAACC,GACNP,QAAQC,IAAI,UAAWM,GACvBP,QAAQC,IAAI,wCACZV,EAAQa,KAAKI,MAAMN,aAAaO,QAAQ,eAE3C,IAGD,kBAAC1B,EAAD,KACE,yBAAK2B,UAAU,OACb,4BAAQA,UAAU,cAChB,0CACC7B,GAAQA,EAAKgB,KAAI,SAACc,GAAD,OAAU,2BAAIA,UCnBpCC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B1B,QAAQC,IAAI,8BAEZ,IAAM0B,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnD,QACf6C,UAAUC,cAAcQ,YAI1B9B,QAAQC,IACN,oFAKEmB,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBzB,QAAQC,IAAI,sCAGRmB,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BnB,OAAM,SAACC,GACNP,QAAQO,MAAM,4CAA6CA,MC5FjE0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,kBAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,kBAAN,sBAEP3B,IAkEV,SAAiCO,EAAOC,GAEtCuB,MAAMxB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BpB,MAAK,SAACqB,GAEL,IAAMC,EAAcD,EAASD,QAAQlD,IAAI,gBAEnB,MAApBmD,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAACC,GAClCA,EAAayB,aAAa1B,MAAK,WAC7BV,OAAOC,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1Bd,OAAM,WACLN,QAAQC,IACN,mEAzFAmD,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCxB,QAAQC,IACN,iHAMJiB,EAAgBC,EAAOC,OClC/BE,I","file":"static/js/main.1cf33b8c.chunk.js","sourcesContent":["import React from \"react\";\nconst AppStateContext = React.createContext({ state: \"loading\" });\nconst AppDispatchContext = React.createContext();\n\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case \"stateChange\": {\n      return { state: action.data };\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`);\n    }\n  }\n}\n\nfunction AppProvider({ children }) {\n  const [state, dispatch] = React.useReducer(appReducer, { state: \"loading\" });\n  return (\n    <AppStateContext.Provider value={state}>\n      <AppDispatchContext.Provider value={dispatch}>\n        {children}\n      </AppDispatchContext.Provider>\n    </AppStateContext.Provider>\n  );\n}\n\nfunction useAppState() {\n  const context = React.useContext(AppStateContext);\n  if (context === undefined) {\n    throw new Error(\"useCountState must be used within a CountProvider\");\n  }\n  return context;\n}\n\nfunction useAppDispatch() {\n  const context = React.useContext(AppDispatchContext);\n  if (context === undefined) {\n    throw new Error(\"useCountDispatch must be used within a CountProvider\");\n  }\n  return context;\n}\n\nexport { AppProvider, useAppState, useAppDispatch };\n","import React from \"react\";\nimport wretch from \"wretch\";\nimport { AppProvider } from \"./app-context\";\nimport \"./App.css\";\n\nfunction App() {\n  //const loadingState = localStorage.getItem(\"loadingState\");\n\n  const [data, setData] = React.useState([]);\n\n  React.useEffect(() => {\n    wretch(\"https://www.reddit.com/new.json\")\n      .get()\n      .json((json) => {\n        const parsedData = json.data.children.map((item) => item.data.title);\n        console.log(\"caching data in local storage for offline use\");\n        localStorage.setItem(\"data\", JSON.stringify(parsedData));\n        setData(parsedData);\n      })\n      .catch((error) => {\n        console.log(\"ERROR>>\", error);\n        console.log(\"using cached data from local storage\");\n        setData(JSON.parse(localStorage.getItem(\"data\")));\n      });\n  }, []);\n\n  return (\n    <AppProvider>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Hello World</p>\n          {data && data.map((post) => <p>{post}</p>)}\n        </header>\n      </div>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        console.log(\"installing service worker \");\n\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all\" +\n                  \"tabs for this page are closed \"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use \");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration \", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}